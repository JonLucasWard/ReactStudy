{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Dell\\\\Documents\\\\CodeFiles\\\\week4\\\\MY-React-Tests\\\\my-first-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Documents\\\\CodeFiles\\\\week4\\\\MY-React-Tests\\\\my-first-react-app\\\\src\\\\components\\\\poke-component.tsx\";\nimport React from 'react';\nimport Axios from 'axios';\nexport class PokeComponent extends React.Component {\n  // passing in the interface as a prop\n  constructor(props) {\n    super(props);\n    this.state = {\n      // match state to desired interface\n      name: '',\n      id: 0,\n      types: [],\n      imageUrl: '',\n      inputValue: ''\n    };\n  }\n\n  updateValue(e) {\n    // copy state then replace with input values\n    const value = e.target.value;\n    this.setState(_objectSpread({}, this.state, {\n      inputValue: value\n    }));\n  }\n\n  searchPokemon() {\n    // function to set url from what is passed in\n    const url = \"https://pokeapi.co/api/v2/pokemon/\".concat(this.state.inputValue); // Axios sends a GET request to the URL of the string passed to the\n    // .get function.  This function returns a promise. We should call\n    // .then to provide handling logic for when the promise resolves.\n    // Alternatively, we could use async/await to handle the response.\n    // We will receive a data payload from Axios - all we need to do is\n    // map the payload properties we are interested in, to a new state object\n\n    Axios.get(url).then(payload => {\n      //payload.data.name\n      //payload.data.id\n      //payload.data.sprites.front_default\n      //payload.data.types.map(o => o.type.name), there can be multiple types, so we map them out\n      this.setState(_objectSpread({}, this.state, {\n        name: payload.data.name,\n        id: payload.data.id,\n        imageUrl: payload.data.sprites.front_default,\n        types: payload.data.types.map(o => o.type.name)\n      }));\n    });\n  }\n\n  render() {\n    // Convert each pokemon type to a list item with the type string\n    // within it\n    const typeListing = this.state.types.map(type => {\n      // display types from its map\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, type);\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"display-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, this.state.id && // only display h2 if id is truthy\n    React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"#\", this.state.id, \": \", this.state.name), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, typeListing), React.createElement(\"img\", {\n      src: this.state.imageUrl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"poke-submit-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.inputValue,\n      onChange: e => this.updateValue(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.searchPokemon(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\Dell\\Documents\\CodeFiles\\week4\\MY-React-Tests\\my-first-react-app\\src\\components\\poke-component.tsx"],"names":["React","Axios","PokeComponent","Component","constructor","props","state","name","id","types","imageUrl","inputValue","updateValue","e","value","target","setState","searchPokemon","url","get","then","payload","data","sprites","front_default","map","o","type","render","typeListing"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAUA,OAAO,MAAMC,aAAN,SAA4BF,KAAK,CAACG,SAAlC,CAA6D;AAAE;AAClEC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACpB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AAAE;AACXC,MAAAA,IAAI,EAAE,EADG;AAETC,MAAAA,EAAE,EAAE,CAFK;AAGTC,MAAAA,KAAK,EAAE,EAHE;AAITC,MAAAA,QAAQ,EAAE,EAJD;AAKTC,MAAAA,UAAU,EAAE;AALH,KAAb;AAOH;;AAEDC,EAAAA,WAAW,CAACC,CAAD,EAAS;AAAE;AAClB,UAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAvB;AACA,SAAKE,QAAL,mBACO,KAAKV,KADZ;AAEIK,MAAAA,UAAU,EAAEG;AAFhB;AAIH;;AAEDG,EAAAA,aAAa,GAAG;AAAE;AACd,UAAMC,GAAG,+CAAwC,KAAKZ,KAAL,CAAWK,UAAnD,CAAT,CADY,CAGZ;AACA;AACA;AACA;AAEA;AACA;;AACAV,IAAAA,KAAK,CAACkB,GAAN,CAAUD,GAAV,EAAeE,IAAf,CAAoBC,OAAO,IAAI;AAC3B;AACA;AACA;AACA;AACA,WAAKL,QAAL,mBACO,KAAKV,KADZ;AAEIC,QAAAA,IAAI,EAAEc,OAAO,CAACC,IAAR,CAAaf,IAFvB;AAGIC,QAAAA,EAAE,EAAEa,OAAO,CAACC,IAAR,CAAad,EAHrB;AAIIE,QAAAA,QAAQ,EAAEW,OAAO,CAACC,IAAR,CAAaC,OAAb,CAAqBC,aAJnC;AAKIf,QAAAA,KAAK,EAAEY,OAAO,CAACC,IAAR,CAAab,KAAb,CAAmBgB,GAAnB,CAAwBC,CAAD,IAAYA,CAAC,CAACC,IAAF,CAAOpB,IAA1C;AALX;AAQH,KAbD;AAcH;;AAEDqB,EAAAA,MAAM,GAAG;AACL;AACA;AACA,UAAMC,WAAW,GAAG,KAAKvB,KAAL,CAAWG,KAAX,CAAiBgB,GAAjB,CAAqBE,IAAI,IAAI;AAAE;AAC/C,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKA,IAAL,CAAR;AACH,KAFmB,CAApB;AAIA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,EAAE,EAAC,mBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKrB,KAAL,CAAWE,EAAX,IAAiB;AACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAM,KAAKF,KAAL,CAAWE,EAAjB,QAAuB,KAAKF,KAAL,CAAWC,IAAlC,CAFR,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKsB,WAAL,CAJJ,EAKI;AAAK,MAAA,GAAG,EAAE,KAAKvB,KAAL,CAAWI,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ,EAQI;AAAK,MAAA,EAAE,EAAC,uBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AACI,MAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWK,UADtB;AAEI,MAAA,QAAQ,EAAGE,CAAD,IAAY,KAAKD,WAAL,CAAiBC,CAAjB,CAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAII;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKI,aAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,CARJ,CADJ;AAiBH;;AAvE+D","sourcesContent":["import React from 'react';\r\nimport Axios from 'axios';\r\n\r\ninterface IPokeState { // establishing an interface\r\n    name: string,\r\n    id: number,\r\n    types: String[],\r\n    imageUrl: string,\r\n    inputValue: string\r\n}\r\n\r\nexport class PokeComponent extends React.Component<any, IPokeState> { // passing in the interface as a prop\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = { // match state to desired interface\r\n            name: '',\r\n            id: 0,\r\n            types: [],\r\n            imageUrl: '',\r\n            inputValue: ''\r\n        };\r\n    }\r\n\r\n    updateValue(e: any) { // copy state then replace with input values\r\n        const value = e.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            inputValue: value\r\n        });\r\n    }\r\n\r\n    searchPokemon() { // function to set url from what is passed in\r\n        const url = `https://pokeapi.co/api/v2/pokemon/${this.state.inputValue}`;\r\n\r\n        // Axios sends a GET request to the URL of the string passed to the\r\n        // .get function.  This function returns a promise. We should call\r\n        // .then to provide handling logic for when the promise resolves.\r\n        // Alternatively, we could use async/await to handle the response.\r\n\r\n        // We will receive a data payload from Axios - all we need to do is\r\n        // map the payload properties we are interested in, to a new state object\r\n        Axios.get(url).then(payload => {\r\n            //payload.data.name\r\n            //payload.data.id\r\n            //payload.data.sprites.front_default\r\n            //payload.data.types.map(o => o.type.name), there can be multiple types, so we map them out\r\n            this.setState({\r\n                ...this.state,\r\n                name: payload.data.name,\r\n                id: payload.data.id,\r\n                imageUrl: payload.data.sprites.front_default,\r\n                types: payload.data.types.map((o: any) => o.type.name)\r\n\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // Convert each pokemon type to a list item with the type string\r\n        // within it\r\n        const typeListing = this.state.types.map(type => { // display types from its map\r\n            return (<li>{type}</li>)\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <div id=\"display-container\">\r\n                    {this.state.id && // only display h2 if id is truthy\r\n                        <h2>#{this.state.id}: {this.state.name}</h2>\r\n                    }\r\n                    <ol>{typeListing}</ol>\r\n                    <img src={this.state.imageUrl}></img>\r\n                </div>\r\n                <div id=\"poke-submit-container\">\r\n                    <input type=\"text\"\r\n                        value={this.state.inputValue}\r\n                        onChange={(e: any) => this.updateValue(e)}></input>\r\n                    <button onClick={() => this.searchPokemon()}>Submit</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}