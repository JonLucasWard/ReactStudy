{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Documents\\\\CodeFiles\\\\week4\\\\MY-React-Tests\\\\my-first-react-app\\\\src\\\\components\\\\clicker-component.tsx\";\nimport * as React from 'react';\nimport { ClickerDisplay } from './clicker/clicker-display-component'; // import other components\n\nimport { ClickerButton } from './clicker/clicker-button-component';\n/**\r\n * General state, state management\r\n * Communication and updating of state, between parent and child components\r\n *\r\n * (Stateful) components will have values attached to their state.\r\n * This state value can be accessed via this.state.key.\r\n *\r\n * When we initialize the component, for instance, using the constructor,\r\n * we can assign an initial state. Afterwords, we should never directly mutate\r\n * the state. State is immutable. Instead, we pass a new state to the setState\r\n * function, to move from one immutable state to the next.\r\n *\r\n * The reason for this is that if we mutate the state directly React will not\r\n * know that the state has changed, and therefore cannot know to rerender content.\r\n *\r\n */\n\nexport class ClickerComponent extends React.Component {\n  constructor(props) {\n    // set initial state\n    super(props);\n    this.state = {\n      clicks: 0\n    };\n  }\n\n  increment(amount) {\n    // function that adds to clicks state\n    this.setState({\n      clicks: this.state.clicks + amount\n    });\n  }\n\n  render() {\n    // make the clicker\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(ClickerDisplay, {\n      clicks: this.state.clicks\n      /* add clicker display with a clicks value*/\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(ClickerButton, {\n      increment: x => this.increment(x)\n      /*make clicker button passing in these values*/\n      ,\n      clicks: this.state.clicks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\Dell\\Documents\\CodeFiles\\week4\\MY-React-Tests\\my-first-react-app\\src\\components\\clicker-component.tsx"],"names":["React","ClickerDisplay","ClickerButton","ClickerComponent","Component","constructor","props","state","clicks","increment","amount","setState","render","x"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,qCAA/B,C,CAAsE;;AACtE,SAASC,aAAT,QAA8B,oCAA9B;AAEA;;;;;;;;;;;;;;;;;AAgBA,OAAO,MAAMC,gBAAN,SAA+BH,KAAK,CAACI,SAArC,CAAyD;AAE5DC,EAAAA,WAAW,CAACC,KAAD,EAAa;AAAE;AACtB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE;AADC,KAAb;AAGH;;AAEDC,EAAAA,SAAS,CAACC,MAAD,EAAiB;AAAE;AACxB,SAAKC,QAAL,CAAc;AACVH,MAAAA,MAAM,EAAE,KAAKD,KAAL,CAAWC,MAAX,GAAoBE;AADlB,KAAd;AAGH;;AAEDE,EAAAA,MAAM,GAAG;AAAE;AACP,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,cAAD;AAAgB,MAAA,MAAM,EAAE,KAAKL,KAAL,CAAWC;AAAO;AAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,aAAD;AACI,MAAA,SAAS,EAAGK,CAAD,IAAe,KAAKJ,SAAL,CAAeI,CAAf;AAAiB;AAD/C;AAEI,MAAA,MAAM,EAAE,KAAKN,KAAL,CAAWC,MAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADJ;AAUH;;AA1B2D","sourcesContent":["import * as React from 'react';\r\nimport { ClickerDisplay } from './clicker/clicker-display-component'; // import other components\r\nimport { ClickerButton } from './clicker/clicker-button-component';\r\n\r\n/**\r\n * General state, state management\r\n * Communication and updating of state, between parent and child components\r\n *\r\n * (Stateful) components will have values attached to their state.\r\n * This state value can be accessed via this.state.key.\r\n *\r\n * When we initialize the component, for instance, using the constructor,\r\n * we can assign an initial state. Afterwords, we should never directly mutate\r\n * the state. State is immutable. Instead, we pass a new state to the setState\r\n * function, to move from one immutable state to the next.\r\n *\r\n * The reason for this is that if we mutate the state directly React will not\r\n * know that the state has changed, and therefore cannot know to rerender content.\r\n *\r\n */\r\nexport class ClickerComponent extends React.Component<any, any> {\r\n\r\n    constructor(props: any) { // set initial state\r\n        super(props);\r\n        this.state = {\r\n            clicks: 0\r\n        }\r\n    }\r\n\r\n    increment(amount: number) { // function that adds to clicks state\r\n        this.setState({\r\n            clicks: this.state.clicks + amount\r\n        });\r\n    }\r\n\r\n    render() { // make the clicker\r\n        return (\r\n            <div>\r\n                {/* <div>{this.state.clicks}</div> */}\r\n                <ClickerDisplay clicks={this.state.clicks /* add clicker display with a clicks value*/} />\r\n                <ClickerButton\r\n                    increment={(x: number) => this.increment(x)/*make clicker button passing in these values*/}\r\n                    clicks={this.state.clicks} />\r\n                {/* <ClickerButton increment={this.increment.bind(this)} /> */}\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}