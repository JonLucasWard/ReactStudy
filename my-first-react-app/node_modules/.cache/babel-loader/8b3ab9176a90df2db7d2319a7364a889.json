{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Dell\\\\Documents\\\\CodeFiles\\\\week4\\\\MY-React-Tests\\\\my-first-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Documents\\\\CodeFiles\\\\week4\\\\MY-React-Tests\\\\my-first-react-app\\\\src\\\\components\\\\array-component.tsx\";\nimport * as React from 'react';\nimport { PersonComponent } from './array-persons/person-component';\nexport class ArrayComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // starting array\n      array: [{\n        name: 'Stephon',\n        id: 1,\n        age: 23\n      }, {\n        name: 'Dionel',\n        id: 2,\n        age: 15\n      }, {\n        name: '\"Sam\"',\n        id: 3,\n        age: 35\n      }],\n      inputValue: ''\n    };\n  }\n\n  updateValue(e) {\n    const value = e.target.value;\n    this.setState(_objectSpread({}, this.state, {\n      // copies all existing state properties\n      inputValue: value // overwrites the inputValue property\n\n    }));\n  }\n\n  submitValue() {\n    const name = this.state.inputValue;\n    const age = Math.floor(Math.random() * 50);\n    this.state.array.unshift({\n      // add new element to front of array, return new length\n      name,\n      age,\n      id: this.state.array.length\n    }); // const newArray = [, ...this.state.array]\n\n    this.setState(_objectSpread({}, this.state, {\n      inputValue: ''\n    }));\n  }\n  /*\r\n      We want to render a list with these names, in the format of\r\n      <ul>\r\n          <li>{person data}</li>\r\n      </ul>\r\n      */\n\n\n  render() {\n    // Mapping each name from {name} -> <li>{name}</li>\n    const nameList = this.state.array.map(n => React.createElement(\"li\", {\n      key: n.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, n.name)\n    /* set key and display name for all values in the array */\n    );\n    const personComponentList = this.state.array.map(n => {\n      //second list of interface objects\n      return React.createElement(PersonComponent, {\n        key: n.id,\n        id: n.id,\n        name: n.name,\n        age: n.age,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, nameList), React.createElement(\"input\", {\n      type: \"text\",\n      onChange:\n      /* on ANY change to page update value function*/\n      e => this.updateValue(e),\n      value: this.state.inputValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.submitValue()\n      /* create new list item with this */\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Submit\")), React.createElement(\"div\", {\n      id: \"person-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, personComponentList));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\Dell\\Documents\\CodeFiles\\week4\\MY-React-Tests\\my-first-react-app\\src\\components\\array-component.tsx"],"names":["React","PersonComponent","ArrayComponent","Component","constructor","props","state","array","name","id","age","inputValue","updateValue","e","value","target","setState","submitValue","Math","floor","random","unshift","length","render","nameList","map","n","personComponentList"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { PersonComponent } from './array-persons/person-component';\r\n\r\n\r\nexport class ArrayComponent extends React.Component<any, any> {\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = { // starting array\r\n            array: [\r\n                { name: 'Stephon', id: 1, age: 23 },\r\n                { name: 'Dionel', id: 2, age: 15 },\r\n                { name: '\"Sam\"', id: 3, age: 35 }],\r\n            inputValue: ''\r\n        };\r\n    }\r\n\r\n    updateValue(e: any) {\r\n        const value = e.target.value;\r\n        this.setState({\r\n            ...this.state, // copies all existing state properties\r\n            inputValue: value // overwrites the inputValue property\r\n        });\r\n    }\r\n\r\n    submitValue() {\r\n        const name = this.state.inputValue;\r\n        const age = Math.floor(Math.random() * 50);\r\n        this.state.array.unshift({ // add new element to front of array, return new length\r\n            name,\r\n            age,\r\n            id: this.state.array.length,\r\n        });\r\n        // const newArray = [, ...this.state.array]\r\n        this.setState({\r\n            ...this.state,\r\n            inputValue: '',\r\n        });\r\n    }\r\n\r\n    /*\r\n        We want to render a list with these names, in the format of\r\n        <ul>\r\n            <li>{person data}</li>\r\n        </ul>\r\n\r\n\r\n    */\r\n    render() {\r\n        // Mapping each name from {name} -> <li>{name}</li>\r\n        const nameList = this.state.array.map((n: any) =>\r\n            (<li key={n.id}>{n.name}</li> /* set key and display name for all values in the array */)\r\n        );\r\n\r\n        const personComponentList = this.state.array.map((n: any) => { //second list of interface objects\r\n            return (<PersonComponent key={n.id} id={n.id} name={n.name} age={n.age} />)\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <ul>\r\n                        {nameList}\r\n                    </ul>\r\n                    <input type=\"text\" onChange={/* on ANY change to page update value function*/(e) => this.updateValue(e)} value={this.state.inputValue}></input>\r\n                    <button onClick={() => this.submitValue() /* create new list item with this */} >Submit</button>\r\n                </div>\r\n\r\n                <div id=\"person-container\">\r\n                    {personComponentList}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}