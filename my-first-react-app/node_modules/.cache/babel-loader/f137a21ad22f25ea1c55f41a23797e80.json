{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Dell\\\\Documents\\\\CodeFiles\\\\week4\\\\MY-React-Tests\\\\my-first-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Documents\\\\CodeFiles\\\\week4\\\\MY-React-Tests\\\\my-first-react-app\\\\src\\\\components\\\\ed-imdb-component.tsx\";\nimport React from 'react';\nimport Axios from 'axios'; // need this to talk to other websites\n\n// does a component accept values for properties and state?\nexport class EdImdbComponent extends React.Component {\n  //component, takes in interface as set state\n  constructor(props) {\n    super(props);\n    this.state = {\n      // starting state is all nulls based on the interface\n      title: '',\n      rated: '',\n      released: '',\n      runtime: '',\n      genre: '',\n      actors: '',\n      plot: '',\n      poster: '',\n      inputValue: ''\n    };\n  }\n\n  updateValue(e) {\n    // change state, make new object replacing old values\n    const value = e.target.value;\n    this.setState(_objectSpread({}, this.state, {\n      inputValue: value\n    }));\n  }\n\n  searchMovie() {\n    // access api, grab it using input as URL\n    const url = \"http://www.omdbapi.com/?apikey=71b08367&t=\".concat(this.state.inputValue); // Axios sends a GET request to the URL of the string passed to the\n    // .get function.  This function returns a promise. We should call\n    // .then to provide handling logic for when the promise resolves.\n    // Alternatively, we could use async/await to handle the response.\n    // We will receive a data payload from Axios - all we need to do is\n    // map the payload properties we are interested in, to a new state object\n\n    Axios.get(url).then(payload => {\n      // set payload to interface template\n      //payload.data.name\n      //payload.data.id\n      //payload.data.sprites.front_default\n      //payload.data.types.map(o => o.type.name)\n      this.setState(_objectSpread({}, this.state, {\n        title: payload.data.Title,\n        rated: payload.data.Rated,\n        released: payload.data.Released,\n        runtime: payload.data.Runtime,\n        genre: payload.data.Genre,\n        actors: payload.data.Actors,\n        plot: payload.data.Plot,\n        poster: payload.data.Poster\n      }));\n    });\n  }\n\n  render() {\n    // make the component!\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.state.title && // only display h2 if id is truthy\n    React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.state.title), React.createElement(\"img\", {\n      src: this.state.poster,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, this.state.title && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Released: \", this.state.released, \", Rated: \", this.state.rated), this.state.title && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Runtime: \", this.state.runtime, \", Genre: \", this.state.genre), this.state.title && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Actors: \", this.state.actors), this.state.title && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Plot: \", this.state.plot))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Search Movie Titles\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.inputValue,\n      onChange: e => this.updateValue(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.searchMovie(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\Dell\\Documents\\CodeFiles\\week4\\MY-React-Tests\\my-first-react-app\\src\\components\\ed-imdb-component.tsx"],"names":["React","Axios","EdImdbComponent","Component","constructor","props","state","title","rated","released","runtime","genre","actors","plot","poster","inputValue","updateValue","e","value","target","setState","searchMovie","url","get","then","payload","data","Title","Rated","Released","Runtime","Genre","Actors","Plot","Poster","render","textAlign"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Axios from 'axios'; // need this to talk to other websites\r\n\r\ninterface EdMovieState { // template for making movies\r\n    title: string,\r\n    rated: string,\r\n    released: string,\r\n    runtime: string,\r\n    genre: string,\r\n    actors: string,\r\n    plot: string,\r\n    poster: string,\r\n    inputValue: string\r\n}\r\n\r\n// does a component accept values for properties and state?\r\nexport class EdImdbComponent extends React.Component<any, EdMovieState> { //component, takes in interface as set state\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = { // starting state is all nulls based on the interface\r\n            title: '',\r\n            rated: '',\r\n            released: '',\r\n            runtime: '',\r\n            genre: '',\r\n            actors: '',\r\n            plot: '',\r\n            poster: '',\r\n            inputValue: ''\r\n        };\r\n    }\r\n\r\n    updateValue(e: any) { // change state, make new object replacing old values\r\n        const value = e.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            inputValue: value\r\n        });\r\n    }\r\n\r\n    searchMovie() { // access api, grab it using input as URL\r\n        const url = `http://www.omdbapi.com/?apikey=71b08367&t=${this.state.inputValue}`;\r\n\r\n        // Axios sends a GET request to the URL of the string passed to the\r\n        // .get function.  This function returns a promise. We should call\r\n        // .then to provide handling logic for when the promise resolves.\r\n        // Alternatively, we could use async/await to handle the response.\r\n\r\n        // We will receive a data payload from Axios - all we need to do is\r\n        // map the payload properties we are interested in, to a new state object\r\n        Axios.get(url).then(payload => { // set payload to interface template\r\n            //payload.data.name\r\n            //payload.data.id\r\n            //payload.data.sprites.front_default\r\n            //payload.data.types.map(o => o.type.name)\r\n            this.setState({\r\n                ...this.state,\r\n                title: payload.data.Title,\r\n                rated: payload.data.Rated,\r\n                released: payload.data.Released,\r\n                runtime: payload.data.Runtime,\r\n                genre: payload.data.Genre,\r\n                actors: payload.data.Actors,\r\n                plot: payload.data.Plot,\r\n                poster: payload.data.Poster\r\n            })\r\n        });\r\n    }\r\n\r\n    render() { // make the component!\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <div>\r\n                    <div style={{ textAlign: \"center\" }}>\r\n                        {this.state.title && // only display h2 if id is truthy\r\n                            <h2 >{this.state.title}</h2>\r\n                        }\r\n                        <img src={this.state.poster}></img>\r\n                    </div>\r\n                    <div style={{ textAlign: \"center\" }}>\r\n                        {this.state.title &&\r\n                            <p>Released: {this.state.released}, Rated: {this.state.rated}</p>\r\n                        }\r\n                        {this.state.title &&\r\n                            <p>Runtime: {this.state.runtime}, Genre: {this.state.genre}</p>\r\n                        }\r\n                        {this.state.title &&\r\n                            <p>Actors: {this.state.actors}</p>\r\n                        }\r\n                        {this.state.title &&\r\n                            <p>Plot: {this.state.plot}</p>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <p style={{ textAlign: \"center\" }}>Search Movie Titles</p>\r\n                    <input type=\"text\"\r\n                        value={this.state.inputValue}\r\n                        onChange={(e: any) => this.updateValue(e)}></input>\r\n                    <button onClick={() => this.searchMovie()}>Submit</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}